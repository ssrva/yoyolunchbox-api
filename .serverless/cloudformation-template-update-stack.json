{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-createUser"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUser"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateUser"
      }
    },
    "UpdateMealPreferenceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateMealPreference"
      }
    },
    "GetAddressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getAddress"
      }
    },
    "AddAddressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-addAddress"
      }
    },
    "UpdateAddressLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateAddress"
      }
    },
    "GetUserOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserOrders"
      }
    },
    "GetUserTransactionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserTransactions"
      }
    },
    "CreatePaymentsOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-createPaymentsOrder"
      }
    },
    "UpdateWalletBalanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateWalletBalance"
      }
    },
    "GetUserWalletBalanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserWalletBalance"
      }
    },
    "GetMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getMenu"
      }
    },
    "GetFoodImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getFoodImage"
      }
    },
    "PlaceOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-placeOrder"
      }
    },
    "CancelOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-cancelOrder"
      }
    },
    "AdminGetOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetOrders"
      }
    },
    "AdminPlaceOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminPlaceOrder"
      }
    },
    "AdminUpdateOrderStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminUpdateOrderStatus"
      }
    },
    "AdminGetMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetMenu"
      }
    },
    "AdminGetTransactionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetTransactions"
      }
    },
    "AdminAddMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminAddMenu"
      }
    },
    "AdminEditMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminEditMenu"
      }
    },
    "AdminDeleteMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminDeleteMenu"
      }
    },
    "AdminGetUserWalletBalanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetUserWalletBalance"
      }
    },
    "AdminGetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetUser"
      }
    },
    "AdminUpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminUpdateUser"
      }
    },
    "AdminAddUserTransactionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminAddUserTransaction"
      }
    },
    "AdminUpdateOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminUpdateOrder"
      }
    },
    "AdminCancelOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminCancelOrder"
      }
    },
    "AdminGetOrdersToExportLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetOrdersToExport"
      }
    },
    "AdminExportOrdersToShipDayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminExportOrdersToShipDay"
      }
    },
    "AdminGetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetAllUsers"
      }
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.createUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-createUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.updateUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "UpdateMealPreferenceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.updateMealPreference",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateMealPreference",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateMealPreferenceLogGroup"
      ]
    },
    "GetAddressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/address.get",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getAddress",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetAddressLogGroup"
      ]
    },
    "AddAddressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/address.add",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-addAddress",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AddAddressLogGroup"
      ]
    },
    "UpdateAddressLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/address.update",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateAddress",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateAddressLogGroup"
      ]
    },
    "GetUserOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserOrdersLogGroup"
      ]
    },
    "GetUserTransactionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserTransactions",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserTransactions",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserTransactionsLogGroup"
      ]
    },
    "CreatePaymentsOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.createPaymentsOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-createPaymentsOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role"
      },
      "DependsOn": [
        "CreatePaymentsOrderLogGroup"
      ]
    },
    "UpdateWalletBalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.updateWalletBalance",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateWalletBalance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateWalletBalanceLogGroup"
      ]
    },
    "GetUserWalletBalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserWalletBalance",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserWalletBalance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserWalletBalanceLogGroup"
      ]
    },
    "GetMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.getMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetMenuLogGroup"
      ]
    },
    "GetFoodImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/food.getFoodImage",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getFoodImage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role"
      },
      "DependsOn": [
        "GetFoodImageLogGroup"
      ]
    },
    "PlaceOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.placeOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-placeOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "PlaceOrderLogGroup"
      ]
    },
    "CancelOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.cancelOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-cancelOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "CancelOrderLogGroup"
      ]
    },
    "AdminGetOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.getOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetOrdersLogGroup"
      ]
    },
    "AdminPlaceOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.placeOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminPlaceOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminPlaceOrderLogGroup"
      ]
    },
    "AdminUpdateOrderStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.updateOrderStatus",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminUpdateOrderStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminUpdateOrderStatusLogGroup"
      ]
    },
    "AdminGetMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.getMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetMenuLogGroup"
      ]
    },
    "AdminGetTransactionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.getTransactions",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetTransactions",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetTransactionsLogGroup"
      ]
    },
    "AdminAddMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.addMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminAddMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminAddMenuLogGroup"
      ]
    },
    "AdminEditMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.editMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminEditMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminEditMenuLogGroup"
      ]
    },
    "AdminDeleteMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.deleteMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminDeleteMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminDeleteMenuLogGroup"
      ]
    },
    "AdminGetUserWalletBalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserWalletBalance",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetUserWalletBalance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetUserWalletBalanceLogGroup"
      ]
    },
    "AdminGetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetUserLogGroup"
      ]
    },
    "AdminUpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.adminUpdateUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminUpdateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminUpdateUserLogGroup"
      ]
    },
    "AdminAddUserTransactionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.addTransaction",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminAddUserTransaction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminAddUserTransactionLogGroup"
      ]
    },
    "AdminUpdateOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.updateOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminUpdateOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminUpdateOrderLogGroup"
      ]
    },
    "AdminCancelOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.cancelOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminCancelOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminCancelOrderLogGroup"
      ]
    },
    "AdminGetOrdersToExportLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.getOrdersToExport",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetOrdersToExport",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetOrdersToExportLogGroup"
      ]
    },
    "AdminExportOrdersToShipDayLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.exportToShipDay",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminExportOrdersToShipDay",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role"
      },
      "DependsOn": [
        "AdminExportOrdersToShipDayLogGroup"
      ]
    },
    "AdminGetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1646480044305-2022-03-05T11:34:04.305Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getAllUsers",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetAllUsersLogGroup"
      ]
    },
    "CreateUserLambdaVersionNJpkH3uvXAbiiSx23LvBIve3Ug5QlIhjS2GbukLITk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetUserLambdaVersionEJxl6lTrcPu6FD4De187opmsuAp4VknhVYVsHp7OH4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "UpdateUserLambdaVersiongjiBKocpbcdQJQ832h3X5fYXrzHFzY4e2ohSKiAdw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "UpdateMealPreferenceLambdaVersion4GtofUSXFKEAiXpazABZrwFOada1Maa3rIRSVp3VMbo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMealPreferenceLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetAddressLambdaVersion5f1E7EpHmIA6r6ur339Do57uJqxhA0dLylAKyrJ5A4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAddressLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AddAddressLambdaVersionpqlLo1j9xBMKu2kKN0FjQP2qrxa9gsGKvhmgiAWRd8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddAddressLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "UpdateAddressLambdaVersionc9lFYenySjADUFLlTnSd0QkiL4SX1OZR2FWcwZWPBKI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateAddressLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetUserOrdersLambdaVersion1pigTgLFniBiOuzzaNZToggUw33QHclkJaUOUDFlck": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserOrdersLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetUserTransactionsLambdaVersione1g01RaMJrocdnq6SaanJ9ppK41jcRnS4U1NtYBRA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserTransactionsLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "CreatePaymentsOrderLambdaVersion6woJORYnTuN3RE4WunPYfmofDpKD74XTCvmFGLMKxC8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePaymentsOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "UpdateWalletBalanceLambdaVersionaL7PwM4FCoqI7bMQKaviXWaHi1XXw8wDTU5BQsE46M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateWalletBalanceLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetUserWalletBalanceLambdaVersionM7YVQHtGhY3uaNfz9WOBAYuOHqYqmvKfoyQnm1kk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserWalletBalanceLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetMenuLambdaVersionOCEvDVOgYoy1hr9e1vFvPxj71eHzpcpE5aeFyTGvg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMenuLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "GetFoodImageLambdaVersionkVc9rmbp8x8HAgJYywmHkY4LbHLodPId745t0YFk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFoodImageLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "PlaceOrderLambdaVersion3IoWgU2MNtgk8K0GFKrzUQGMKTsMC49y7wKAVyywU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PlaceOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "CancelOrderLambdaVersion8dJGiSmZAheztZNf2FPsGKNKloDEba9VPJU0roxF3gw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CancelOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetOrdersLambdaVersionsY3t9o7NQv6tPJiaY7FggCfwogeCwHbzk42e2DDOOg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetOrdersLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminPlaceOrderLambdaVersionzLF4yQyuZekQWgb6q0i942qnkDWQKVaWhkgW0KIE4s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminPlaceOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminUpdateOrderStatusLambdaVersionhiS5IgyZkpYVNNmhcGnnA9Qdyt7JH2b46j6zdtxL70": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminUpdateOrderStatusLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetMenuLambdaVersionXasyMsmQuY8kfqFzZIcklD9h8UOCWOybA6yKSJa39jM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetMenuLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetTransactionsLambdaVersionUYfHGqr42xM9CsporWmAE4WL3FQbV3drJodH1qtpn8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetTransactionsLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminAddMenuLambdaVersionC03SfFS4PebZOZnzcFW9YQCoMowCvTnHrA1Ny4ciY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminAddMenuLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminEditMenuLambdaVersion8dNp5ytYYpFZrSAcHMkQU9Ef1k4fqSGTAsl3Z0a1ak": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminEditMenuLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminDeleteMenuLambdaVersion336BZCIbeRT9LWlst8lNf1UHr6t68Fbjp1ZkBNXgoug": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminDeleteMenuLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetUserWalletBalanceLambdaVersionbl20Qz2lnvriMZprglWUMu9QKJ5tXbeIvYXL4ilKoyU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetUserWalletBalanceLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetUserLambdaVersioncyvgFRPfPSbnQ8Cl3M3naQDgSD2BiDfimh30eB7Ko": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetUserLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminUpdateUserLambdaVersionm52Bti88HzekIEgnvM8lCM5nF1g4mIcSPq0zRJtk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminUpdateUserLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminAddUserTransactionLambdaVersionI7sEhd0smHCIqCM6ES5mj0Ong9LsrHtfC4ERZrLyc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminAddUserTransactionLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminUpdateOrderLambdaVersion0wpVJArNYmBO49x2p1Li3l3ksDdfschdgh0q7VW1JyQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminUpdateOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminCancelOrderLambdaVersionNKb8UBvNhtgmwRoSlSTS9cYnJvf9CZWtqKnIn8VmI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminCancelOrderLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetOrdersToExportLambdaVersion3utdNCAbCB2nWqbAlc5dDnarmwe6IcEdKIIOywWcvqg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetOrdersToExportLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminExportOrdersToShipDayLambdaVersionrACZxajEHvNe6V1iLVMKEjWt56A3D8392JJR1qPmg4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminExportOrdersToShipDayLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "AdminGetAllUsersLambdaVersionOlzqVYXHhNNxWjwze9CUU7LA49meKW4k8TqCCJrSUGI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetAllUsersLambdaFunction"
        },
        "CodeSha256": "PogNA6GLKiCAkGT/lx+ufRCfGijYgWmXC3pVY36po0A="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "production-yoyolunchbox-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserMealpreference": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "meal_preference",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrders"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVarPageVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVar"
        },
        "PathPart": "{page}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVarPageVarStatusVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVarPageVar"
        },
        "PathPart": "{status}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserTransactions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "transactions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserTransactionsUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserTransactions"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserBalance": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "balance",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserBalanceUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserBalance"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddress": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "address",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAddressUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAddress"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePayments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "payments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsOrder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePayments"
        },
        "PathPart": "order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePayments"
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsUserWallet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePaymentsUser"
        },
        "PathPart": "wallet",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMenu": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "menu",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFood": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "food",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFoodImage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFood"
        },
        "PathPart": "image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFoodImageKeyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFoodImage"
        },
        "PathPart": "{key}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdmin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "admin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersDateVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "{date}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "update",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdateOrderidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdate"
        },
        "PathPart": "{orderId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVar"
        },
        "PathPart": "{status}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersExport": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "export",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenu": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "menu",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuAdd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "add",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuEdit": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "edit",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminTransactions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "transactions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserBalance": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUser"
        },
        "PathPart": "balance",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserBalanceUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUserBalance"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUser"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserTransaction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUser"
        },
        "PathPart": "transaction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrderstoexport": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "orders_to_export",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersDateVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersDateVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminTransactionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminTransactions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuAddOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuEditOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuEdit"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUserBalanceUsernameVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserBalanceUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUserUsernameVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUserTransactionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserTransaction"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrderstoexportOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrderstoexport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersExportOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersExport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserMealpreferencePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserMealpreference"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateMealPreferenceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAddressUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddressUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAddressLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAddressPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddress"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddAddressLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAddressPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAddress"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateAddressLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserOrdersUsernameVarPageVarStatusVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVarPageVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserTransactionsUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserTransactionsUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserTransactionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodPaymentsOrderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePaymentsOrder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreatePaymentsOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodPaymentsUserWalletPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePaymentsUserWallet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateWalletBalanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserBalanceUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserBalanceUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserWalletBalanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodMenuPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMenuLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFoodImageKeyVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFoodImageKeyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFoodImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodOrdersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PlaceOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodOrdersDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CancelOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersDateVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersDateVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminPlaceOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminUpdateOrderStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminTransactionsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminTransactions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetTransactionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuAddPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminAddMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuEditPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuEdit"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminEditMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminDeleteMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserBalanceUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserBalanceUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetUserWalletBalanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "lmomtp",
        "AuthorizationScopes": [
          "https://baqg6112pd.execute-api.us-east-1.amazonaws.com/all.all"
        ],
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AdminGetUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminUserUsernameVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminUpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserTransactionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserTransaction"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminAddUserTransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "lmomtp",
        "AuthorizationScopes": [
          "https://baqg6112pd.execute-api.us-east-1.amazonaws.com/all.all"
        ],
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminUpdateOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AdminUpdateOrderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminOrdersDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminCancelOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrderstoexportPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrderstoexport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": "lmomtp",
        "AuthorizationScopes": [
          "https://baqg6112pd.execute-api.us-east-1.amazonaws.com/all.all"
        ],
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetOrdersToExportLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AdminGetOrdersToExportLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAdminOrdersExportPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersExport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminExportOrdersToShipDayLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "1UnderscoreobLR6NkYPApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "1_obLR6NkYP",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:us-east-1:321082332978:userpool/us-east-1_obLR6NkYP"
        ]
      }
    },
    "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "1_Z2Cc2hIvX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:us-east-1:321082332978:userpool/us-east-1_Z2Cc2hIvX"
        ]
      }
    },
    "ApiGatewayDeployment1646480037744": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "production"
      },
      "DependsOn": [
        "ApiGatewayMethodAdminOrdersDateVarOptions",
        "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarOptions",
        "ApiGatewayMethodAdminMenuOptions",
        "ApiGatewayMethodAdminTransactionsOptions",
        "ApiGatewayMethodAdminMenuAddOptions",
        "ApiGatewayMethodAdminMenuEditOptions",
        "ApiGatewayMethodAdminMenuIdVarOptions",
        "ApiGatewayMethodAdminUserBalanceUsernameVarOptions",
        "ApiGatewayMethodAdminUserUsernameVarOptions",
        "ApiGatewayMethodAdminUserTransactionOptions",
        "ApiGatewayMethodAdminOrdersOptions",
        "ApiGatewayMethodAdminOrderstoexportOptions",
        "ApiGatewayMethodAdminOrdersExportOptions",
        "ApiGatewayMethodAdminUsersOptions",
        "ApiGatewayMethodUserUsernameVarGet",
        "ApiGatewayMethodUserPut",
        "ApiGatewayMethodUserMealpreferencePut",
        "ApiGatewayMethodAddressUsernameVarGet",
        "ApiGatewayMethodAddressPost",
        "ApiGatewayMethodAddressPut",
        "ApiGatewayMethodUserOrdersUsernameVarPageVarStatusVarGet",
        "ApiGatewayMethodUserTransactionsUsernameVarGet",
        "ApiGatewayMethodPaymentsOrderPost",
        "ApiGatewayMethodPaymentsUserWalletPost",
        "ApiGatewayMethodUserBalanceUsernameVarGet",
        "ApiGatewayMethodMenuPost",
        "ApiGatewayMethodFoodImageKeyVarGet",
        "ApiGatewayMethodOrdersPost",
        "ApiGatewayMethodOrdersDelete",
        "ApiGatewayMethodAdminOrdersDateVarGet",
        "ApiGatewayMethodAdminOrdersPost",
        "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarPut",
        "ApiGatewayMethodAdminMenuPost",
        "ApiGatewayMethodAdminTransactionsPost",
        "ApiGatewayMethodAdminMenuAddPost",
        "ApiGatewayMethodAdminMenuEditPost",
        "ApiGatewayMethodAdminMenuIdVarDelete",
        "ApiGatewayMethodAdminUserBalanceUsernameVarGet",
        "ApiGatewayMethodAdminUserUsernameVarGet",
        "ApiGatewayMethodAdminUserUsernameVarPut",
        "ApiGatewayMethodAdminUserTransactionPost",
        "ApiGatewayMethodAdminOrdersPatch",
        "ApiGatewayMethodAdminOrdersDelete",
        "ApiGatewayMethodAdminOrderstoexportPost",
        "ApiGatewayMethodAdminOrdersExportPost",
        "ApiGatewayMethodAdminUsersGet"
      ]
    },
    "GetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateMealPreferenceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMealPreferenceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAddressLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAddressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddAddressLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddAddressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateAddressLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateAddressLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserTransactionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserTransactionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreatePaymentsOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePaymentsOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateWalletBalanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateWalletBalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserWalletBalanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserWalletBalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFoodImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFoodImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PlaceOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PlaceOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CancelOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CancelOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminPlaceOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminPlaceOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminUpdateOrderStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminUpdateOrderStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetTransactionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetTransactionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminAddMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminAddMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminEditMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminEditMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminDeleteMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminDeleteMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetUserWalletBalanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetUserWalletBalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminUpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminUpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminAddUserTransactionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminAddUserTransactionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminUpdateOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminUpdateOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminCancelOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminCancelOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetOrdersToExportLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetOrdersToExportLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminExportOrdersToShipDayLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminExportOrdersToShipDayLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetAllUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-ServerlessDeploymentBucketName"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersionNJpkH3uvXAbiiSx23LvBIve3Ug5QlIhjS2GbukLITk"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionEJxl6lTrcPu6FD4De187opmsuAp4VknhVYVsHp7OH4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersiongjiBKocpbcdQJQ832h3X5fYXrzHFzY4e2ohSKiAdw"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMealPreferenceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMealPreferenceLambdaVersion4GtofUSXFKEAiXpazABZrwFOada1Maa3rIRSVp3VMbo"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateMealPreferenceLambdaFunctionQualifiedArn"
      }
    },
    "GetAddressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAddressLambdaVersion5f1E7EpHmIA6r6ur339Do57uJqxhA0dLylAKyrJ5A4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetAddressLambdaFunctionQualifiedArn"
      }
    },
    "AddAddressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddAddressLambdaVersionpqlLo1j9xBMKu2kKN0FjQP2qrxa9gsGKvhmgiAWRd8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AddAddressLambdaFunctionQualifiedArn"
      }
    },
    "UpdateAddressLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateAddressLambdaVersionc9lFYenySjADUFLlTnSd0QkiL4SX1OZR2FWcwZWPBKI"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateAddressLambdaFunctionQualifiedArn"
      }
    },
    "GetUserOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserOrdersLambdaVersion1pigTgLFniBiOuzzaNZToggUw33QHclkJaUOUDFlck"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserOrdersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserTransactionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserTransactionsLambdaVersione1g01RaMJrocdnq6SaanJ9ppK41jcRnS4U1NtYBRA"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserTransactionsLambdaFunctionQualifiedArn"
      }
    },
    "CreatePaymentsOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePaymentsOrderLambdaVersion6woJORYnTuN3RE4WunPYfmofDpKD74XTCvmFGLMKxC8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CreatePaymentsOrderLambdaFunctionQualifiedArn"
      }
    },
    "UpdateWalletBalanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateWalletBalanceLambdaVersionaL7PwM4FCoqI7bMQKaviXWaHi1XXw8wDTU5BQsE46M"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateWalletBalanceLambdaFunctionQualifiedArn"
      }
    },
    "GetUserWalletBalanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserWalletBalanceLambdaVersionM7YVQHtGhY3uaNfz9WOBAYuOHqYqmvKfoyQnm1kk"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserWalletBalanceLambdaFunctionQualifiedArn"
      }
    },
    "GetMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMenuLambdaVersionOCEvDVOgYoy1hr9e1vFvPxj71eHzpcpE5aeFyTGvg"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetMenuLambdaFunctionQualifiedArn"
      }
    },
    "GetFoodImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFoodImageLambdaVersionkVc9rmbp8x8HAgJYywmHkY4LbHLodPId745t0YFk"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetFoodImageLambdaFunctionQualifiedArn"
      }
    },
    "PlaceOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PlaceOrderLambdaVersion3IoWgU2MNtgk8K0GFKrzUQGMKTsMC49y7wKAVyywU"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-PlaceOrderLambdaFunctionQualifiedArn"
      }
    },
    "CancelOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CancelOrderLambdaVersion8dJGiSmZAheztZNf2FPsGKNKloDEba9VPJU0roxF3gw"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CancelOrderLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetOrdersLambdaVersionsY3t9o7NQv6tPJiaY7FggCfwogeCwHbzk42e2DDOOg"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetOrdersLambdaFunctionQualifiedArn"
      }
    },
    "AdminPlaceOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminPlaceOrderLambdaVersionzLF4yQyuZekQWgb6q0i942qnkDWQKVaWhkgW0KIE4s"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminPlaceOrderLambdaFunctionQualifiedArn"
      }
    },
    "AdminUpdateOrderStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminUpdateOrderStatusLambdaVersionhiS5IgyZkpYVNNmhcGnnA9Qdyt7JH2b46j6zdtxL70"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminUpdateOrderStatusLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetMenuLambdaVersionXasyMsmQuY8kfqFzZIcklD9h8UOCWOybA6yKSJa39jM"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetTransactionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetTransactionsLambdaVersionUYfHGqr42xM9CsporWmAE4WL3FQbV3drJodH1qtpn8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetTransactionsLambdaFunctionQualifiedArn"
      }
    },
    "AdminAddMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminAddMenuLambdaVersionC03SfFS4PebZOZnzcFW9YQCoMowCvTnHrA1Ny4ciY"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminAddMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminEditMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminEditMenuLambdaVersion8dNp5ytYYpFZrSAcHMkQU9Ef1k4fqSGTAsl3Z0a1ak"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminEditMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminDeleteMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminDeleteMenuLambdaVersion336BZCIbeRT9LWlst8lNf1UHr6t68Fbjp1ZkBNXgoug"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminDeleteMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetUserWalletBalanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetUserWalletBalanceLambdaVersionbl20Qz2lnvriMZprglWUMu9QKJ5tXbeIvYXL4ilKoyU"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetUserWalletBalanceLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetUserLambdaVersioncyvgFRPfPSbnQ8Cl3M3naQDgSD2BiDfimh30eB7Ko"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetUserLambdaFunctionQualifiedArn"
      }
    },
    "AdminUpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminUpdateUserLambdaVersionm52Bti88HzekIEgnvM8lCM5nF1g4mIcSPq0zRJtk"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminUpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "AdminAddUserTransactionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminAddUserTransactionLambdaVersionI7sEhd0smHCIqCM6ES5mj0Ong9LsrHtfC4ERZrLyc"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminAddUserTransactionLambdaFunctionQualifiedArn"
      }
    },
    "AdminUpdateOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminUpdateOrderLambdaVersion0wpVJArNYmBO49x2p1Li3l3ksDdfschdgh0q7VW1JyQ"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminUpdateOrderLambdaFunctionQualifiedArn"
      }
    },
    "AdminCancelOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminCancelOrderLambdaVersionNKb8UBvNhtgmwRoSlSTS9cYnJvf9CZWtqKnIn8VmI"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminCancelOrderLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetOrdersToExportLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetOrdersToExportLambdaVersion3utdNCAbCB2nWqbAlc5dDnarmwe6IcEdKIIOywWcvqg"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetOrdersToExportLambdaFunctionQualifiedArn"
      }
    },
    "AdminExportOrdersToShipDayLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminExportOrdersToShipDayLambdaVersionrACZxajEHvNe6V1iLVMKEjWt56A3D8392JJR1qPmg4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminExportOrdersToShipDayLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetAllUsersLambdaVersionOlzqVYXHhNNxWjwze9CUU7LA49meKW4k8TqCCJrSUGI"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/production"
          ]
        ]
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-ServiceEndpoint"
      }
    }
  }
}