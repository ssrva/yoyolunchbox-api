{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-createUser"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUser"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateUser"
      }
    },
    "GetUserOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserOrders"
      }
    },
    "GetUserTransactionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserTransactions"
      }
    },
    "CreatePaymentsOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-createPaymentsOrder"
      }
    },
    "UpdateWalletBalanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-updateWalletBalance"
      }
    },
    "GetUserWalletBalanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getUserWalletBalance"
      }
    },
    "GetMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getMenu"
      }
    },
    "GetFoodImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-getFoodImage"
      }
    },
    "PlaceOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-placeOrder"
      }
    },
    "CancelOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-cancelOrder"
      }
    },
    "AdminGetOrdersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetOrders"
      }
    },
    "AdminUpdateOrderStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminUpdateOrderStatus"
      }
    },
    "AdminGetMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetMenu"
      }
    },
    "AdminGetTransactionsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetTransactions"
      }
    },
    "AdminAddMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminAddMenu"
      }
    },
    "AdminEditMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminEditMenu"
      }
    },
    "AdminDeleteMenuLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminDeleteMenu"
      }
    },
    "AdminGetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetUser"
      }
    },
    "AdminUpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminUpdateUser"
      }
    },
    "AdminAddUserTransactionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminAddUserTransaction"
      }
    },
    "AdminExportOrdersToShipDayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminExportOrdersToShipDay"
      }
    },
    "AdminGetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/yoyolunchbox-api-production-adminGetAllUsers"
      }
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.createUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-createUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.updateUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "GetUserOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserOrdersLogGroup"
      ]
    },
    "GetUserTransactionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserTransactions",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserTransactions",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserTransactionsLogGroup"
      ]
    },
    "CreatePaymentsOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.createPaymentsOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-createPaymentsOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role"
      },
      "DependsOn": [
        "CreatePaymentsOrderLogGroup"
      ]
    },
    "UpdateWalletBalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.updateWalletBalance",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-updateWalletBalance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "UpdateWalletBalanceLogGroup"
      ]
    },
    "GetUserWalletBalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUserWalletBalance",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getUserWalletBalance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetUserWalletBalanceLogGroup"
      ]
    },
    "GetMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.getMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "GetMenuLogGroup"
      ]
    },
    "GetFoodImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/food.getFoodImage",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-getFoodImage",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role"
      },
      "DependsOn": [
        "GetFoodImageLogGroup"
      ]
    },
    "PlaceOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.placeOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-placeOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "PlaceOrderLogGroup"
      ]
    },
    "CancelOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.cancelOrder",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-cancelOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "CancelOrderLogGroup"
      ]
    },
    "AdminGetOrdersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.getOrders",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetOrders",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetOrdersLogGroup"
      ]
    },
    "AdminUpdateOrderStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.updateOrderStatus",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminUpdateOrderStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminUpdateOrderStatusLogGroup"
      ]
    },
    "AdminGetMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.getMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetMenuLogGroup"
      ]
    },
    "AdminGetTransactionsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/payments.getTransactions",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetTransactions",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetTransactionsLogGroup"
      ]
    },
    "AdminAddMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.addMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminAddMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminAddMenuLogGroup"
      ]
    },
    "AdminEditMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.editMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminEditMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminEditMenuLogGroup"
      ]
    },
    "AdminDeleteMenuLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/menu.deleteMenu",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminDeleteMenu",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminDeleteMenuLogGroup"
      ]
    },
    "AdminGetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetUserLogGroup"
      ]
    },
    "AdminUpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.adminUpdateUser",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminUpdateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminUpdateUserLogGroup"
      ]
    },
    "AdminAddUserTransactionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.addTransaction",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminAddUserTransaction",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminAddUserTransactionLogGroup"
      ]
    },
    "AdminExportOrdersToShipDayLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/orders.exportToShipDay",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminExportOrdersToShipDay",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminExportOrdersToShipDayLogGroup"
      ]
    },
    "AdminGetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/yoyolunchbox-api/production/1637517805323-2021-11-21T18:03:25.323Z/yoyolunchbox-api.zip"
        },
        "Handler": "resources/users.getAllUsers",
        "Runtime": "nodejs12.x",
        "FunctionName": "yoyolunchbox-api-production-adminGetAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::321082332978:role/yoyo-lambda-s3-read-role",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-36cc262a"
          ],
          "SubnetIds": [
            "subnet-c30953e2",
            "subnet-788fd31e",
            "subnet-b2fc9c83",
            "subnet-f66d81ba",
            "subnet-ac92cbf3",
            "subnet-9ac8de94"
          ]
        }
      },
      "DependsOn": [
        "AdminGetAllUsersLogGroup"
      ]
    },
    "CreateUserLambdaVersionJhwTPUGxGqhvJeX2he9eljaQHukObYmkmNhoBsv4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetUserLambdaVersionuaMQxGogAhRn1OhCCDWOUAjonn17SBqAtBibRco6Ye4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "UpdateUserLambdaVersionPEAAIez3rX461KqobkD8H50FuDSyZNacaQjCL4LKg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetUserOrdersLambdaVersionL4icKphLQVq96t87MNrUkp5UPbtdPyDnugWjHrU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserOrdersLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetUserTransactionsLambdaVersionx7rFzqgLRr1ZadbEBLrNgIB7jZCHwtJCKqZ8o0WHA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserTransactionsLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "CreatePaymentsOrderLambdaVersionJpBLDJyYj6RlaMULzSLopFgB0Y7xf7UdWUrtRghUY8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreatePaymentsOrderLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "UpdateWalletBalanceLambdaVersionKJjwbaxVmJsdsk4YhjxMfLKn4bVUjKi4P45EHp7i8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateWalletBalanceLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetUserWalletBalanceLambdaVersionXcUZF23SEMS00DjWnyiTXcmEnKpNhLbohKN4AJ8IKaQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserWalletBalanceLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetMenuLambdaVersion9TsDNL72IxoZbM2QbvKZP4toHx7d06hHp3pHFq6p4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMenuLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "GetFoodImageLambdaVersionr94JMYyZxzf37S4c1kUq1erIbjXHpqqXN2XoXWqhw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFoodImageLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "PlaceOrderLambdaVersionkPRBc9IS5L6yf443JXuyaF4XTzWac7ddcRIvx9c4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PlaceOrderLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "CancelOrderLambdaVersionnV4Ru2H61wWfcdJlrKkPLU2mly1TrBu9YxTZ7EGHE3o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CancelOrderLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminGetOrdersLambdaVersionZJc1NqbMDU6OQp0OEKonFjY8tpZsPM2kUy2cC3oWkQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetOrdersLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminUpdateOrderStatusLambdaVersionMjObvC7YXmlMenjpwrkdrMTMgsCBR1c0c3vpvusek8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminUpdateOrderStatusLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminGetMenuLambdaVersionLMWSThfkLmdYkT1iOO5HNNEiN9uz8gs96mAwrESkQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetMenuLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminGetTransactionsLambdaVersionybrGI0X5wxj0yWmRt3dfAhRHIwuGe3fzLdEO49Bxw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetTransactionsLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminAddMenuLambdaVersionIfUmfdtHieQEgcJkXUgEbR0GpPPuTm0pwV4W11V4vA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminAddMenuLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminEditMenuLambdaVersionyZvREmCaEj0Smn4CIGt26NexKD6lBtVDsrTRYfraY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminEditMenuLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminDeleteMenuLambdaVersionjCHz5EiCevEW7FKS7LiunFStENufKyudXtY4wPa10Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminDeleteMenuLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminGetUserLambdaVersionNvD8Tw9mjCZBped4IvIPAnZh7yqPY0p30hiT4tW6gxo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetUserLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminUpdateUserLambdaVersionuEi2zr2IJ9WIEnaTykqOxgXMzcSZjSbviG50FBPMrk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminUpdateUserLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminAddUserTransactionLambdaVersionfhIshwxSIoEaTKZdjVpSM9hR0HPizzXjzJXW3mT2RU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminAddUserTransactionLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminExportOrdersToShipDayLambdaVersionsaPxzT3vqiCtnqDoklicSnGNjUdlbqdjhF19Yq32GY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminExportOrdersToShipDayLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "AdminGetAllUsersLambdaVersionduWSlV4LUorR9rLjQ7TFMZeS5Z7y3ZrwbXqOAVVsA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminGetAllUsersLambdaFunction"
        },
        "CodeSha256": "WIElOuIXaicGGCSsMxdnSAJc8i1wlMRvR6jKgNEGa0Q="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "production-yoyolunchbox-api",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrders"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVarPageVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVar"
        },
        "PathPart": "{page}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserOrdersUsernameVarPageVarStatusVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVarPageVar"
        },
        "PathPart": "{status}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserTransactions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "transactions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserTransactionsUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserTransactions"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserBalance": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "balance",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserBalanceUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserBalance"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePayments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "payments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsOrder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePayments"
        },
        "PathPart": "order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePayments"
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePaymentsUserWallet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourcePaymentsUser"
        },
        "PathPart": "wallet",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMenu": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "menu",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFood": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "food",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFoodImage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFood"
        },
        "PathPart": "image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFoodImageKeyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFoodImage"
        },
        "PathPart": "{key}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdmin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "admin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "orders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersDateVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "{date}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "update",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdateOrderidVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdate"
        },
        "PathPart": "{orderId}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVar"
        },
        "PathPart": "{status}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminOrdersExport": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminOrders"
        },
        "PathPart": "export",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenu": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "menu",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuAdd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "add",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuEdit": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "edit",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminMenuIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminTransactions": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "transactions",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserUsernameVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUser"
        },
        "PathPart": "{username}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUserTransaction": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdminUser"
        },
        "PathPart": "transaction",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAdminUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAdmin"
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersDateVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersDateVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminTransactionsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminTransactions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuAddOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuEditOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuEdit"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminMenuIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUserUsernameVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUserTransactionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserTransaction"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminOrdersExportOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersExport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAdminUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserOrdersUsernameVarPageVarStatusVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserOrdersUsernameVarPageVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserTransactionsUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserTransactionsUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserTransactionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodPaymentsOrderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePaymentsOrder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreatePaymentsOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodPaymentsUserWalletPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePaymentsUserWallet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateWalletBalanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodUserBalanceUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserBalanceUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserWalletBalanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodMenuPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodFoodImageKeyVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFoodImageKeyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFoodImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodOrdersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PlaceOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodOrdersDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceOrders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CancelOrderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreobLR6NkYPApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersDateVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersDateVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetOrdersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersUpdateOrderidVarStatusVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminUpdateOrderStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenu"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminTransactionsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminTransactions"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetTransactionsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuAddPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminAddMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuEditPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuEdit"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminEditMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminMenuIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminMenuIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminDeleteMenuLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserUsernameVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserUsernameVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserUsernameVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminUpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUserTransactionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUserTransaction"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminAddUserTransactionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminOrdersExportPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminOrdersExport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminExportOrdersToShipDayLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAdminUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAdminUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AdminGetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer"
    },
    "1UnderscoreobLR6NkYPApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "1_obLR6NkYP",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:us-east-1:321082332978:userpool/us-east-1_obLR6NkYP"
        ]
      }
    },
    "1UnderscoreZ2Cc2hIvXApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "1_Z2Cc2hIvX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          "arn:aws:cognito-idp:us-east-1:321082332978:userpool/us-east-1_Z2Cc2hIvX"
        ]
      }
    },
    "ApiGatewayDeployment1637517798680": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "production"
      },
      "DependsOn": [
        "ApiGatewayMethodAdminOrdersDateVarOptions",
        "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarOptions",
        "ApiGatewayMethodAdminMenuOptions",
        "ApiGatewayMethodAdminTransactionsOptions",
        "ApiGatewayMethodAdminMenuAddOptions",
        "ApiGatewayMethodAdminMenuEditOptions",
        "ApiGatewayMethodAdminMenuIdVarOptions",
        "ApiGatewayMethodAdminUserUsernameVarOptions",
        "ApiGatewayMethodAdminUserTransactionOptions",
        "ApiGatewayMethodAdminOrdersExportOptions",
        "ApiGatewayMethodAdminUsersOptions",
        "ApiGatewayMethodUserUsernameVarGet",
        "ApiGatewayMethodUserPut",
        "ApiGatewayMethodUserOrdersUsernameVarPageVarStatusVarGet",
        "ApiGatewayMethodUserTransactionsUsernameVarGet",
        "ApiGatewayMethodPaymentsOrderPost",
        "ApiGatewayMethodPaymentsUserWalletPost",
        "ApiGatewayMethodUserBalanceUsernameVarGet",
        "ApiGatewayMethodMenuPost",
        "ApiGatewayMethodFoodImageKeyVarGet",
        "ApiGatewayMethodOrdersPost",
        "ApiGatewayMethodOrdersDelete",
        "ApiGatewayMethodAdminOrdersDateVarGet",
        "ApiGatewayMethodAdminOrdersUpdateOrderidVarStatusVarPut",
        "ApiGatewayMethodAdminMenuPost",
        "ApiGatewayMethodAdminTransactionsPost",
        "ApiGatewayMethodAdminMenuAddPost",
        "ApiGatewayMethodAdminMenuEditPost",
        "ApiGatewayMethodAdminMenuIdVarDelete",
        "ApiGatewayMethodAdminUserUsernameVarGet",
        "ApiGatewayMethodAdminUserUsernameVarPut",
        "ApiGatewayMethodAdminUserTransactionPost",
        "ApiGatewayMethodAdminOrdersExportPost",
        "ApiGatewayMethodAdminUsersGet"
      ]
    },
    "GetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserTransactionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserTransactionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreatePaymentsOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreatePaymentsOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateWalletBalanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateWalletBalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserWalletBalanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserWalletBalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFoodImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFoodImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PlaceOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PlaceOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CancelOrderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CancelOrderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetOrdersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetOrdersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminUpdateOrderStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminUpdateOrderStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetTransactionsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetTransactionsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminAddMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminAddMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminEditMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminEditMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminDeleteMenuLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminDeleteMenuLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminUpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminUpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminAddUserTransactionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminAddUserTransactionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminExportOrdersToShipDayLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminExportOrdersToShipDayLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AdminGetAllUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AdminGetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-ServerlessDeploymentBucketName"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersionJhwTPUGxGqhvJeX2he9eljaQHukObYmkmNhoBsv4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionuaMQxGogAhRn1OhCCDWOUAjonn17SBqAtBibRco6Ye4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersionPEAAIez3rX461KqobkD8H50FuDSyZNacaQjCL4LKg"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserOrdersLambdaVersionL4icKphLQVq96t87MNrUkp5UPbtdPyDnugWjHrU"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserOrdersLambdaFunctionQualifiedArn"
      }
    },
    "GetUserTransactionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserTransactionsLambdaVersionx7rFzqgLRr1ZadbEBLrNgIB7jZCHwtJCKqZ8o0WHA"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserTransactionsLambdaFunctionQualifiedArn"
      }
    },
    "CreatePaymentsOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreatePaymentsOrderLambdaVersionJpBLDJyYj6RlaMULzSLopFgB0Y7xf7UdWUrtRghUY8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CreatePaymentsOrderLambdaFunctionQualifiedArn"
      }
    },
    "UpdateWalletBalanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateWalletBalanceLambdaVersionKJjwbaxVmJsdsk4YhjxMfLKn4bVUjKi4P45EHp7i8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-UpdateWalletBalanceLambdaFunctionQualifiedArn"
      }
    },
    "GetUserWalletBalanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserWalletBalanceLambdaVersionXcUZF23SEMS00DjWnyiTXcmEnKpNhLbohKN4AJ8IKaQ"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetUserWalletBalanceLambdaFunctionQualifiedArn"
      }
    },
    "GetMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMenuLambdaVersion9TsDNL72IxoZbM2QbvKZP4toHx7d06hHp3pHFq6p4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetMenuLambdaFunctionQualifiedArn"
      }
    },
    "GetFoodImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFoodImageLambdaVersionr94JMYyZxzf37S4c1kUq1erIbjXHpqqXN2XoXWqhw"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-GetFoodImageLambdaFunctionQualifiedArn"
      }
    },
    "PlaceOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PlaceOrderLambdaVersionkPRBc9IS5L6yf443JXuyaF4XTzWac7ddcRIvx9c4"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-PlaceOrderLambdaFunctionQualifiedArn"
      }
    },
    "CancelOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CancelOrderLambdaVersionnV4Ru2H61wWfcdJlrKkPLU2mly1TrBu9YxTZ7EGHE3o"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-CancelOrderLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetOrdersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetOrdersLambdaVersionZJc1NqbMDU6OQp0OEKonFjY8tpZsPM2kUy2cC3oWkQ"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetOrdersLambdaFunctionQualifiedArn"
      }
    },
    "AdminUpdateOrderStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminUpdateOrderStatusLambdaVersionMjObvC7YXmlMenjpwrkdrMTMgsCBR1c0c3vpvusek8"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminUpdateOrderStatusLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetMenuLambdaVersionLMWSThfkLmdYkT1iOO5HNNEiN9uz8gs96mAwrESkQ"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetTransactionsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetTransactionsLambdaVersionybrGI0X5wxj0yWmRt3dfAhRHIwuGe3fzLdEO49Bxw"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetTransactionsLambdaFunctionQualifiedArn"
      }
    },
    "AdminAddMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminAddMenuLambdaVersionIfUmfdtHieQEgcJkXUgEbR0GpPPuTm0pwV4W11V4vA"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminAddMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminEditMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminEditMenuLambdaVersionyZvREmCaEj0Smn4CIGt26NexKD6lBtVDsrTRYfraY"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminEditMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminDeleteMenuLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminDeleteMenuLambdaVersionjCHz5EiCevEW7FKS7LiunFStENufKyudXtY4wPa10Q"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminDeleteMenuLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetUserLambdaVersionNvD8Tw9mjCZBped4IvIPAnZh7yqPY0p30hiT4tW6gxo"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetUserLambdaFunctionQualifiedArn"
      }
    },
    "AdminUpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminUpdateUserLambdaVersionuEi2zr2IJ9WIEnaTykqOxgXMzcSZjSbviG50FBPMrk"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminUpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "AdminAddUserTransactionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminAddUserTransactionLambdaVersionfhIshwxSIoEaTKZdjVpSM9hR0HPizzXjzJXW3mT2RU"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminAddUserTransactionLambdaFunctionQualifiedArn"
      }
    },
    "AdminExportOrdersToShipDayLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminExportOrdersToShipDayLambdaVersionsaPxzT3vqiCtnqDoklicSnGNjUdlbqdjhF19Yq32GY"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminExportOrdersToShipDayLambdaFunctionQualifiedArn"
      }
    },
    "AdminGetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminGetAllUsersLambdaVersionduWSlV4LUorR9rLjQ7TFMZeS5Z7y3ZrwbXqOAVVsA"
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-AdminGetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/production"
          ]
        ]
      },
      "Export": {
        "Name": "sls-yoyolunchbox-api-production-ServiceEndpoint"
      }
    }
  }
}